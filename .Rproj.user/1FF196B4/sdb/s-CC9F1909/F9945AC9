{
    "contents" : "#Christopher Barry, last updated 16/07/2015 at University of Birmingham\n\n#Numerical inversions of the inverse Laplace Transform, with Evans & Chung's (2000) optimum contour (1st one) and the Bromwich contour\n\n#The Evans & Chung (2000) optimum contour----\n\n#' @title Optimum Contour\n#' @description The optimum contour with polar co-ordinates (\\eqn{r} as a function of \\eqn{\\phi}) and complex length increment with \\eqn{\\phi} (Evans and Chung, 2000)\n#'\n#' @param phi \\eqn{\\phi} value\n#' @param m width of the contour - too small and get too close to singularities on negative \\eqn{x}-axis, too large and encounter instability for large positive \\eqn{x}\n#' @param t standard (time) domain variable, also affects contour width\n#' @details if \\code{t} is set as zero, it is changed to 5 (avoids dividing by 0)\n#'\n#' @references Evans & Chung, 2000: Laplace transform inversions using optimal contours in the complex plane \\emph{International Journal of Computer Mathematics} v73 pp531-543.\n#'\n#' @describeIn opC.r \\eqn{r}\nopC.r <- function(phi, m=1, t=5){ #optimal contour expressed in polar co-ordinates\n  if(identical(t, 0)){t <- 5} #note value at t = 0 may still be wrong\n  return(m*phi/(t*sin(phi)))\n}\n\n#' @describeIn opC.r \\eqn{ds/d\\phi}\nopC.ds_dphi <- function(phi, m=1, t=5){ #derivative of contour path length with respect to phi, analytical\n  #return(((m*phi/(t*sin(phi)))^2 + (1/sin(phi) - phi/(tan(phi)*sin(phi)))^2)^0.5) #s as magnitude: real\n  #s as dx and dy components: complex\n  if(identical(t, 0)){t <- 100} #note value at t = 0 may still be wrong; this avoids dividing by 0\n  if(identical(phi, 0)){\n    dx_dphi <- 0 #I have checked this by investigating small values of phi\n  }else{\n    dx_dphi <- (m/t)*((sin(phi) - phi*cos(phi))*cos(phi)/(sin(phi))^2 - phi)\n  }\n  dy_dphi <- (m/t) #independent of phi\n  return(dx_dphi + dy_dphi*1i)\n}\n\n#' @title Inverse Laplace Transform\n#' @description Functionals that numerically invert a Laplace Transform.\n#'\n#' @param L.FUN the Laplace-Transformed function\n#' @param t standard (time) domain function at which to evaluate\n#' @param nterms number of terms to use in the numerical inversion (odd number safest for \\code{iv.opC}, even for \\code{iv.opChalf})\n#' @param m see \\code{\\link{opC.r}} documentation\n#' @param fail.val value to return in event of failure to converge\n#' @param gamma the Bromwich contour is a straight line and intersects the real axis at \\eqn{\\gamma}\n#'\n#' @details Optimum contour based on:\n#'\n#' Evans & Chung, 2000: Laplace transform inversions using optimal contours in the complex plane \\emph{International Journal of Computer Mathematics} v73 pp531-543.\n#'\n#' @examples\n#' tvals <- seq(-pi/2, pi/2, length.out = 7)\n#' sinvals <- vapply(tvals, iv.opC, complex(1), L.FUN = L.sin)\n#' plot(tvals, Re(sinvals), type = \"l\")\n#'\n#' @describeIn iv.opC inversion using the full optimum contour\niv.opC <- function(L.FUN, t, nterms = 31L, m=1, fail.val = NA){\n  FUN <- match.fun(L.FUN) #ensures that FUN is read as a function\n  if(identical(t, 0)){t <- 10^-50} #accurate for very low values of t, but not exactly 0\n  for(attempt in 1:10){\n    dphi <- 2*pi/nterms\n    phi <- -pi + (1:nterms - 1/2)*dphi\n    z <- opC.r(phi, m, t)*cos(phi) + opC.r(phi, m, t)*sin(phi)*1i\n    L <- vapply(z, L.FUN, 1i)\n    if(any(!is.finite(L))){\n      if(identical(attempt, 10L)){cat(\"Laplace Transform inversion failed after 10 attempts.\\n\"); return(fail.val)}\n      m <- m*2\n      nterms <- round(nterms*1.378, 0) #random irregular number to avoid sampling same point again\n      next\n    }\n    em <- exp(z*t)\n    ds_dphi <- vapply(phi, opC.ds_dphi, 1i, m, t)\n    break\n  }\n  return(sum(em*L*ds_dphi)*dphi/(2i*pi))\n}\n\n#' @describeIn iv.opC for functions which are symmetric about the real axis, it is sufficient to use half the optimum contour and half the number of subdivisions (\\code{nterms})\niv.opChalf <- function(L.FUN, t, nterms = 16L, m=1, fail.val = NA){\n  FUN <- match.fun(L.FUN) #ensures that FUN is read as a function\n  if(identical(t, 0)){t <- 10^-50} #accurate for very low values of t, but not exactly 0\n  for(attempt in 1:10){\n    dphi <- pi/nterms\n    phi <- (1:nterms - 1/2)*dphi\n    z <- opC.r(phi, m, t)*cos(phi) + opC.r(phi, m, t)*sin(phi)*1i\n    L <- vapply(z, L.FUN, 1i)\n    if(any(!is.finite(L))){\n      if(identical(attempt, 4L)){cat(\"Laplace Transform inversion failed after\", attempt, \"attempts, with t =\", signif(t, 4), \". \", fail.val, \"returned.\\n\"); return(fail.val)} # have to stop somewhere - return whatever value was specified in case of failure: NA is used for safety\n      m <- m*2\n      nterms <- round(nterms*1.378, 0) #random irregular number to avoid sampling same point again\n      next\n    }\n    em <- exp(z*t)\n    ds_dphi <- vapply(phi, opC.ds_dphi, 1i, m, t)\n    break\n  }\n  return(sum(Im(em*L*ds_dphi))*dphi/pi)\n}\n\n#the Bromwich contour----\n\n#' @title Bromwich Contour\n#' @description The Bromwich contour with polar co-ordinates (\\eqn{r} as a function of \\eqn{\\phi})\n#'\n#' @param phi \\eqn{\\phi} value\n#' @inheritParams iv.opC\n#'\n#' @describeIn BrC.r \\eqn{r}\nBrC.r <- function(phi, gamma = 1){return(gamma/cos(phi))} #Bromwich contour\n\n#' @describeIn BrC.r \\eqn{ds/d\\phi}\nBrC.ds_dphi <- function(phi, gamma = 1){\n  return(1i*(BrC.r(phi, gamma)^2 + (gamma*tan(phi)/cos(phi))^2)^0.5) #purely imaginary\n}\n\n#' @describeIn iv.opC inversion using the Bromwich contour (the definition, but very unstable for numerical evaluation - not recommended)\niv.BrC <- function(L.FUN, t, nterms = 1000L, gamma = 1){\n  FUN <- match.fun(L.FUN) #ensures that FUN is read as a function\n  if(t == 0){t <- 10^-50}\n  tot <- 0 #initialise\n  dphi <- pi/nterms\n  for(n in 1:nterms){\n    phi <- -pi/2 + (n - 1/2)*dphi\n    ds <- dphi*BrC.ds_dphi(phi, gamma)\n    x <- x.rphi(BrC.r(phi, gamma), phi)\n    y <- y.rphi(BrC.r(phi, gamma), phi)\n    tot <- tot + exp((x + y*1i)*t)*FUN(x + y*1i)*ds\n  }\n  return(tot/(2*pi*1i))\n}\n\n#Tools----\n\n#' @title Plot Laplace Transform inversion\n#' @description Plots the results of a Laplace Transform inversion at multiple time values.\n#'\n#' @inheritParams iv.opC\n#' @param METHOD inversion algorithm to use (iv.opC, iv.opChalf or iv.BrC)\n#' @param tPts time points at which to plot\n#' @param ... graphical parameters for \\code{\\link[graphics]{plot}}\n#'\n#' @details This function is useful for investigating the performance of a Laplace Transform inversion over a range of time values.  Use for example with the LT functions provided in with this package (invLT).\n#'\n#' @examples\n#' ivLT.plot(L.tsq, iv.opC, nterms = 31L)\n#' ivLT.plot(L.tsq, iv.opC, nterms = 1000L)\n#' ivLT.plot(L.tsq, iv.opChalf, nterms = 16L)\n#' ivLT.plot(L.tsq, iv.opChalf, nterms = 1000L)\n#' ivLT.plot(L.tsq, iv.BrC, nterms = 31L)\n#' ivLT.plot(L.tsq, iv.BrC, nterms = 1000L)\nivLT.plot <- function(L.FUN, METHOD = iv.opC, tPts = seq(-2,5,.1), nterms = 100, ...){\n  FUN <- match.fun(L.FUN)\n  METHOD <- match.fun(METHOD)\n  iv.LT <- rep(0, length(tPts))\n  for(tn in 1:length(tPts)){iv.LT[tn] <- METHOD(FUN, tPts[tn], nterms = nterms)}\n  plot(tPts, Re(iv.LT), type = \"l\", xlab = \"t\", ylab = \"inv. LT\", ...)\n}\n\n#' @title Laplace Transforms\n#' @description Laplace Transforms of common functions.  Useful for testing out LT inversion functions and whether sufficient precision is being used.\n#'\n#' @param p Laplace domain variable (commonly called \\eqn{s} elsewhere)\n#'\n#' @describeIn L.t LT of \\eqn{t}\nL.t <- function(p){1/p^2}# LT of t^1\n\n#' @describeIn L.t LT of \\eqn{t^2}\nL.tsq <- function(p){2/p^3}# LT of t^2\n\n#' @describeIn L.t LT of \\eqn{e^(-t)}\nL.exp <- function(p){1/(p+1)}# LT of exp(-t)\n\n#' @describeIn L.t LT of cos\\eqn{(t)}\nL.cos <- function(p){p/(p^2 + 1)}# LT of cos(t)\\n\n\n#' @describeIn L.t LT of sin\\eqn{(t)}\nL.sin <- function(p){1/(p^2 + 1)}# LT of sin(t)\\n\n\n#' @describeIn L.t LT of Heaviside unit function stepping at 1: (if \\eqn{p < 1} 0 else 1)\nL.H <- function(p){exp(-p)/p}# LT of H(t - 1), the Heaviside unit function stepping at t = 1\\n\n\n.onLoad <- function(libname, pkgname) {\n  op <- options()\n  op.devtools <- list(\n    devtools.path = \"~/Scripts/R\",\n    devtools.install.args = \"\",\n    devtools.name = \"invLT\",\n    devtools.desc.author = '\"Christopher Barry <cjb309@bham.ac.uk> [Barry, 2015]\"',\n    devtools.desc = list()\n  )\n  toset <- !(names(op.devtools) %in% names(op))\n  if(any(toset)) options(op.devtools[toset])\n\n  invisible()\n}\n\n.onAttach <- function(libname, pkgname){\n  packageStartupMessage(\"Numerical Laplace Transform inversion functions successfully sourced.\\n\",\n      \"Optimum contour integration ref. Evans & Chung, 2000: Laplace transform inversions using optimal contours in the complex plane; International Journal of Computer Mathematics v73 pp531-543.:\\n\",\n      \"iv.opC(L.FUN, t, nterms = 30L, m=1, fail.val = NA){\\n\",\n      \"iv.opC2(L.FUN, t, nterms = 30L, m=1, fail.val = NA){\\n\",\n      \"L.FUN: Laplace Transformed function to be inverted\\n\",\n      \"t: untransformed domain co-ordinate value (typically time) at which to evaluate\\n\",\n      \"nterms: number of terms with which to evaluate the inversion\\n\",\n      \"m: \\\"width\\\" of the contour of integration - smaller values avoid the large oscillations at the right hand side of the Argand diagram, but are more likely to interact with singlurities on the real axis\\n\",\n      \"for further details on m, see E&C 2000, or simply experiment\\n\",\n      \"fail.val: after 10 attempts, increasing m and nterms, if the inversion still produces non-finite results, the function gives up and returns this value\\n\\n\",\n      \"iv.opC2 only uses half of the contour and therefore nterms can be half the size for the same accuracy: valid if Re(L.FUN) is symmetric about the real axis\\n\\n\",\n      \"Bromwich contour integration:\\n\",\n      \"iv.BrC(L.FUN, t, nterms=1000, gamma=1)\\n\",\n      \"gamma: distance of contour to right of imaginary axis\\n\\n\",\n      \"The Bromwich Contour is very unstable; it is included mainly for comparison.  The definition of the inverse Laplace Transform is usually expressed with the Bromwich Contour, even though its numerical implementation is impractical.\\n\\n\",\n      \"Tools:\\n\",\n      \"ivLT.plot(L.FUN, METHOD = iv.opC, tPts = seq(-2,5,.1), nterms = 100, ...)\\n\",\n      \"METHOD: iv.opC, iv.opC2 or iv.BrC\\n\",\n      \"tPts: points at which to plot time\\n\",\n      \"...: parameters to pass to plot\\n\",\n      \"some transformed functions for which there are analytical inverses:\\n\",\n      \"L.t <- function(p){1/p^2}: LT of t^1\\n\",\n      \"L.tsq <- function(p){2/p^3}: LT of t^2\\n\",\n      \"L.exp <- function(p){1/(p+1)}: LT of exp(-t)\\n\",\n      \"L.cos <- function(p){p/(p^2 + 1)}: LT of cos(t)\\n\",\n      \"L.sin <- function(p){1/(p^2 + 1)}: LT of sin(t)\\n\",\n      \"L.H <- function(p){exp(-p)/p}: LT of H(t - 1), the Heaviside unit function stepping at t = 1\\n\")\n}\n",
    "created" : 1440502825300.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2879957120",
    "id" : "F9945AC9",
    "lastKnownWriteTime" : 1440593215,
    "path" : "~/Scripts/R/invLT/R/ivLT.R",
    "project_path" : "R/ivLT.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}